# -*- coding: utf-8 -*-

# =============================================================================
# --- DISCLAIMER / ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ---
# =============================================================================
# ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏±‡∏î‡∏ó‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
# ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å ‡∏Ñ‡∏ß‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á
# ‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏î‡∏•‡∏≠‡∏á (Paper Trading) ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏£‡∏¥‡∏á
# =============================================================================

import ccxt.async_support as ccxt  # <-- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô async_support
import pandas as pd
import pandas_ta as ta
import time
import asyncio
import telegram

# =============================================================================
# --- ‚öôÔ∏è USER CONFIGURATION / ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ---
# =============================================================================

# -- KuCoin API Keys --
# ‡πÉ‡∏™‡πà Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà (‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
KUCOIN_API_KEY = '6874f5b86a7e4f00012d055d'
KUCOIN_API_SECRET = 'a75d24cf-2dff-4311-946d-577703ebf896'

# -- Telegram Bot Configuration --
# ‡πÉ‡∏™‡πà Token ‡πÅ‡∏•‡∏∞ Chat ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
TELEGRAM_TOKEN = '7518863293:AAGti1z6f9_vOPVeM3XIWC57cA1wRX5rKqk'
TELEGRAM_CHAT_ID = '6323845930'

# -- Market Configuration --
# ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
SYMBOLS_TO_WATCH = ['BTC/USDT', 'ETH/USDT', 'XLM/USDT', 'CHZ/USDT', 'LUNC/USDT']
TIMEFRAME = '4h'  # ‡πÑ‡∏ó‡∏°‡πå‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: '1h', '4h', '1d'
LOOP_INTERVAL_MINUTES = 30  # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ã‡πâ‡∏≥‡∏ó‡∏∏‡∏Å‡πÜ ‡∏Å‡∏µ‡πà‡∏ô‡∏≤‡∏ó‡∏µ

# =============================================================================

async def send_telegram_message(message: str):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Telegram"""
    if TELEGRAM_TOKEN == 'YOUR_BOT_TOKEN' or TELEGRAM_CHAT_ID == 'YOUR_CHAT_ID':
        print("‚ùóÔ∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ TELEGRAM_TOKEN ‡πÅ‡∏•‡∏∞ TELEGRAM_CHAT_ID ‡∏Å‡πà‡∏≠‡∏ô")
        return

    try:
        bot = telegram.Bot(token=TELEGRAM_TOKEN)
        # ‡πÉ‡∏ä‡πâ parse_mode='Markdown' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
        await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message, parse_mode='Markdown')
        print("‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Telegram ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á Telegram ‡πÑ‡∏î‡πâ: {e}")


async def analyze_market(exchange: ccxt.Exchange, symbol: str, timeframe: str, limit: int = 250):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì technical indicators"""
    try:
        print(f"üîÑ [{symbol}] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {limit} ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ({timeframe})...")
        # ‡πÉ‡∏ä‡πâ await ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢
        bars = await exchange.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
        df = pd.DataFrame(bars, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')

        # --- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Indicators ---
        df.ta.sma(length=200, append=True)
        df.ta.rsi(length=14, append=True)
        df.ta.macd(fast=12, slow=26, signal=9, append=True)
        df.ta.bbands(length=20, std=2, append=True)
        df['volume_sma_50'] = df['volume'].rolling(window=50).mean()

        return df

    except Exception as e:
        print(f"‚ùóÔ∏è [{symbol}] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        return None


def get_trading_signal(df: pd.DataFrame):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
    if df is None or df.empty:
        return "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"

    latest = df.iloc[-1]
    
    # --- ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Indicators ---
    price = latest['close']
    sma200 = latest['SMA_200']
    rsi = latest['RSI_14']
    macd = latest['MACD_12_26_9']
    macd_signal = latest['MACDs_12_26_9']
    bb_upper = latest['BBU_20_2.0']
    bb_lower = latest['BBL_20_2.0']
    volume = latest['volume']
    volume_sma = latest['volume_sma_50']
    
    # --- ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à ---
    long_term_trend = "üü¢ UPTREND (‡∏ñ‡∏∑‡∏≠‡∏¢‡∏≤‡∏ß‡πÑ‡∏î‡πâ)" if price > sma200 else "üî¥ DOWNTREND (‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á)"
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì MACD Crossover
    macd_cross_above = macd > macd_signal and df.iloc[-2]['MACD_12_26_9'] <= df.iloc[-2]['MACDs_12_26_9']
    
    action, reason = "NEUTRAL / HOLD (‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á)", "‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô"

    if long_term_trend.startswith("üü¢"):
        if macd_cross_above and rsi < 65:
            action, reason = "‚úÖ STRONG BUY (‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏Ç‡πâ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠)", "‡πÄ‡∏Å‡∏¥‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ã‡∏∑‡πâ‡∏≠ MACD Crossover ‡πÉ‡∏ô‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏Ç‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô"
        elif price <= bb_lower and rsi < 40:
            action, reason = "üìà BUY THE DIP (‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡∏ä‡πà‡∏ß‡∏á‡∏¢‡πà‡∏≠‡∏ï‡∏±‡∏ß)", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡∏á‡∏°‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏á Bollinger Band"
        elif price >= bb_upper and rsi > 70:
            action, reason = "üí∞ TAKE PROFIT (‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ó‡∏≥‡∏Å‡∏≥‡πÑ‡∏£)", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ä‡∏ô‡∏Ç‡∏≠‡∏ö‡∏ö‡∏ô Bollinger Band ‡πÅ‡∏•‡∏∞ RSI Overbought"
        else:
            action, reason = "HOLD LONG-TERM (‡∏ñ‡∏∑‡∏≠‡∏¢‡∏≤‡∏ß)", "‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏±‡πâ‡∏ô"
    else: # Downtrend
        if macd > macd_signal:
             action, reason = "CAUTIOUS HOLD (‡∏ñ‡∏∑‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á)", "‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏µ‡∏î‡∏ï‡∏±‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏±‡πâ‡∏ô‡πÉ‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡∏Ç‡∏≤‡∏•‡∏á"
        else:
            action, reason = "üö´ AVOID / SELL (‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á/‡∏Ç‡∏≤‡∏¢)", "‡∏ï‡∏•‡∏≤‡∏î‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏•‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô"

    # --- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ---
    alert_message = f"""
*üîî CRYPTO ALERT: {df.name}*
--------------------------------------
*‡∏£‡∏≤‡∏Ñ‡∏≤:* `{price:,.4f} USDT`
*‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏¢‡∏≤‡∏ß:* *{long_term_trend}*
*‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:* *{action}*
*‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•:* `{reason}`
--------------------------------------
`RSI: {rsi:.2f} | MACD: {macd:.4f}`
"""
    return alert_message


async def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏•‡∏π‡∏õ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
    exchange = ccxt.kucoin({
        'apiKey': KUCOIN_API_KEY,
        'secret': KUCOIN_API_SECRET,
        'options': {'adjustForTimeDifference': True},
    })
    
    try:
        await exchange.load_markets()
        print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö KuCoin ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö KuCoin ‡πÑ‡∏î‡πâ: {e}")
        await exchange.close()
        return

    while True:
        print(f"\n--- ‚è±Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏ß‡∏•‡∏≤ {time.strftime('%Y-%m-%d %H:%M:%S')} ---")
        for symbol in SYMBOLS_TO_WATCH:
            df_market = await analyze_market(exchange, symbol, TIMEFRAME)
            if df_market is not None:
                df_market.name = symbol
                trading_alert = get_trading_signal(df_market)
                print(trading_alert)
                await send_telegram_message(trading_alert)
        
        print(f"--- ‚è∏Ô∏è ‡∏à‡∏ö‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå, ‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å {LOOP_INTERVAL_MINUTES} ‡∏ô‡∏≤‡∏ó‡∏µ ---")
        await asyncio.sleep(LOOP_INTERVAL_MINUTES * 60)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°...")